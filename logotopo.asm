; Disassembly of the Topo Soft iconic animation, 1st version.
; MSX version
;
; By Miguel Colom, 2023.

; Checks:
; z80dasm 1.1.5
; command line: z80dasm -g0x9470 -l -t TOPO

; $ shasum TOPO
; 765de5f1a2e6abce2cced1127e7251a57fb9b3d2  TOPO

; $ z80asm logotopo.asm |shasum a.bin 
; 765de5f1a2e6abce2cced1127e7251a57fb9b3d2  a.bin
    
    WRTVRM: equ 0x4d
    LDIRMV: equ 0x59
    
    NUM_COLS: equ 32
    NUM_ROWS: equ 24
    
    COLOR_TABLE: equ 0x2000
    COLOR_RED_BLACK: equ 0x81
    COLOR_WHITE_BLACK: equ 0xf1
    COLOR_SKYBLUE_BLACK: equ 0x71
    COLOR_LIGHTGREEN_BLACK: equ 0x31
    COLOR_WHITE_TRANSPARENT: equ 0xf0
    
    VRAM_BUFFER: equ 0xc000
    
    ; Position in the color table of the "S" of the "SOFT" text
    COLOR_TABLE_POS_S: equ COLOR_TABLE + 0xf78
    
    ; Length of a line in the "SOFT" text (8 chars)
    COLOR_TABLE_SOFT_LINE_LENGTH: equ 8*8
    
    ; Tables:
    ; ---------------------------------------------------------------
    ; - TABLE_VRAM_DESTINATION:
    ;   Indexed by object ID, this table provides pointers to
    ;   VRAM destinations (positions).
    ;   It stores the actual pointer corresponding to the current
    ;   object in OBJ_VRAM_DESTINATION when the object is being drawn.
    ;   OBJ_VRAM_DESTINATION <-- TABLE_VRAM_DESTINATION[2*P].
    ;   The address is still modified by AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET to
    ;   obtain the final VRAM destination in HL.
    ;
    ;
    ; - TABLE_PTR_OBJECT_ATTRIBS and TABLE_OBJECT_ATTRIBS
    ;   The first table contains pointers indexed by object ID to a
    ;   second table which contains the attributes of the object.
    ;   The attributes are:
    ;       - AUTOMODIF_TILE_LINES_PER_CHAR_ROW
    ;       - AUTOMODIF_NUM_ROWS
    ;       - The patterns
    ;   It's indirected this way:
    ;   TABLE_OBJECT_ATTRIBS[TABLE_PTR_OBJECT_ATTRIBS[2*Q]]
    ;   The patterns in RAM are stored in OBJ_RAM_PATTERNS when the
    ;   object is being drawn.


    ; Auto-modifiers of code
    ; ---------------------------------------------------------------
    ;   - AUTOMODIF_VRAM_OBJECT_DESTINATION: sets parameter P when computing
    ;   OBJ_VRAM_DESTINATION = TABLE_VRAM_DESTINATION[2*P].
    ;
    ;   - AUTOMODIF_OBJECT_ATTRIBS_IDX: sets parameter Q when computing the
    ;   pointer to the table of attributes of the current object:
    ;   TABLE_OBJECT_ATTRIBS[TABLE_PTR_OBJECT_ATTRIBS[2*Q]].
    ;
    ;   - AUTOMODIF_NUM_ROWS: set the number of rows (chars) of the object.
    
    ;   - AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET: sets an offset in VRAM with
    ;   respect to its normal OBJ_VRAM_DESTINATION.
    
    ;   AUTOMODIF_TILE_LINES_PER_CHAR_ROW: number of tile lines to
    ;   fill each char row.
    ;
    ;   AUTOMODIF_TRANSPARENCY: controls if the patterns are
    ;   transparent or opaque.
    
    
    org	09470h
	jp START		;9470  Jump to start

; *******************************************************
; * Animation of the "SOFT" text with light reflections *
; *******************************************************
REFLECTION_ANIMATION:
	ld hl, COLOR_TABLE_POS_S	;9473
	ld de, COLOR_TABLE_POS_S + COLOR_TABLE_SOFT_LINE_LENGTH	;9476
    
    ; In BC it stores the offset that we need to add to HL (a pointer in
    ; the CT for a particular tile) to be in the tile just below.
    ; In fact, it's subtracting 1 to the result, resulting in the
    ; last line of the tile on the left. Is this a bug?
    ;
    ; 32 columns (we subtract 1 since after processing the previous
    ; tile the pointer has been already incremented), each tile being
    ; 8 bytes of color.
	ld bc, (NUM_COLS - 1)*8 - 1       ;9479
l947ch:
	
    ; Get out if HL == DE (it has arrive at the end of line)
    and a			;947c
	sbc hl,de		;947d
	ret z			;947f
    
    ; Not at the end of the line
	add hl,de		;9480 Fix subtraction

    ; Recover normal color, red over black. Upper line.
	ld a, COLOR_RED_BLACK		;9481
	call COPY_8_BYTES_TO_VRAM	;9483

    ; Recover normal color, red over black. Lower line.
	push hl			            ;9486
	add hl,bc			        ;9487
	ld a, COLOR_RED_BLACK	    ;9488
	call COPY_8_BYTES_TO_VRAM	;948a
	pop hl			            ;948d
    
    ; Set white reflection color. Upper line.
	push hl			            ;948e
	ld a, COLOR_WHITE_BLACK		;948f
	call COPY_8_BYTES_TO_VRAM	;9491
    
    ; Set white reflection color. Lower line.
	add hl,bc			        ;9494
	ld a,COLOR_WHITE_BLACK      ;9495
	call COPY_8_BYTES_TO_VRAM	;9497
	pop hl			            ;949a

    ; Wait for 3 vertical retraces
    ei			                ;949b
	push bc			            ;949c
	ld b,003h		            ;949d
l949fh:
	halt			            ;949f
	djnz l949fh		            ;94a0
	pop bc			            ;94a2

	di			                ;94a3
    ; Loop until the whole logo has been walked through
	jr l947ch		            ;94a4

; **********************************************
; * Write 8 times value A to VRAM's address HL *
; **********************************************
COPY_8_BYTES_TO_VRAM:
	push bc			;94a6
	ld b, 8 		;94a7
l94a9h:
	call WRTVRM		;94a9
	inc hl			;94ac
	djnz l94a9h		;94ad
	pop bc			;94af
	ret			    ;94b0

; ***************
; * Move object *
; ***************
MOVE_OBJECT:

; [OBJ_VRAM_DESTINATION] <-- TABLE_VRAM_DESTINATION[2*P]
AUTOMODIF_VRAM_OBJECT_DESTINATION:
	ld hl,0000dh		;94b1 Parameter P is set outside, automodified code
	add hl,hl			;94b4
	ld de, TABLE_VRAM_DESTINATION		;94b5
	add hl,de			;94b8
	ld (OBJ_VRAM_DESTINATION), hl		;94b9 [OBJ_VRAM_DESTINATION] <-- TABLE_VRAM_DESTINATION[2*P]. Ex: 0x9704

; Obtain the table of attributes of the object, according to its index Q
AUTOMODIF_OBJECT_ATTRIBS_IDX:
    ; D1 = HL <-- TABLE_PTR_OBJECT_ATTRIBS + 2*Q
	ld hl,0000eh		;94bc Parameter Q is set outside, automodified code
                        ; Ex: HL=7

	add hl,hl			;94bf
	ld de, TABLE_PTR_OBJECT_ATTRIBS		;94c0
	add hl,de			;94c3 Ex: HL = 0x96A2

    ; DE <-- [D1] = TABLE_PTR_OBJECT_ATTRIBS[2*Q]
	ld e,(hl)			;94c4
	inc hl			    ;94c5
	ld d,(hl)			;94c6
    ; Ex: DE = 0x038E

    ; Obtain object attributes
	; D2 = [D1] + TABLE_OBJECT_ATTRIBS = TABLE_OBJECT_ATTRIBS[TABLE_PTR_OBJECT_ATTRIBS[2*Q]]
    ld hl, TABLE_OBJECT_ATTRIBS		;94c7
	add hl,de			;94ca
    ; Ex: HL = 0x9AB6
    
    ; Explanation.
    ; First it obtains the address D1 = TABLE_PTR_OBJECT_ATTRIBS[2*Q]
    ; And it performs a second indirection: D2 = TABLE_OBJECT_ATTRIBS[D1] = TABLE_OBJECT_ATTRIBS[TABLE_PTR_OBJECT_ATTRIBS[2*Q]]
    
    ; In D2 it finds three fields:
    ; AUTOMODIF_TILE_LINES_PER_CHAR_ROW
    ; AUTOMODIF_NUM_ROWS
    ; The patterns
    
    ; Obtain the number of tile lines to fill each char row
    ; A = [D2] = TABLE_OBJECT_ATTRIBS[TABLE_PTR_OBJECT_ATTRIBS[2*Q]]
	ld a,(hl)			                                ;94cb Ex: A=48
	ld (AUTOMODIF_TILE_LINES_PER_CHAR_ROW + 1),a		;94cc

    ; Obtain the number of rows (chars) of the object
	inc hl			                ;94cf
	ld a,(hl)			            ;94d0 Ex: A=0xB
	ld (AUTOMODIF_NUM_ROWS + 1),a	;94d1

    ; Store the address of the patterns
    ; Copy from RAM's OBJ_RAM_PATTERNS...
	inc hl			                ;94d4
	ld (OBJ_RAM_PATTERNS),hl   ; Ex: 0x9AB8
    ; ... to VRAM's OBJ_VRAM_DESTINATION
	ld ix,(OBJ_VRAM_DESTINATION)		;94d8 IX <-- [OBJ_VRAM_DESTINATION] = TABLE_VRAM_DESTINATION + 2*P. Ex: 0x9704

AUTOMODIF_NUM_ROWS:
	ld c, 5     		;94dc Number of rows (chars) of the object

write_all_tiles:
    ; DE <-- TABLE_VRAM_DESTINATION[2*P], the VRAM address
	ld e,(ix+000h)		;94de
	inc ix		        ;94e1
	ld d,(ix+000h)		;94e3
	inc ix		        ;94e6
    ; Ex: DE = 0xC600

; Get the VRAM destination in HL
; Get the address of the pattern of this particular object in DE
AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET:
	ld hl,000b0h		;94e8
	add hl,de			;94eb
    ;
	ld de,(OBJ_RAM_PATTERNS)		;94ec Ex: 0x9AB8

; Set the number of tile pattern lines that it needs to copy in that char row
; For example, if B=0x48 (72), then it's 72 / 8 = 9 tiles.
AUTOMODIF_TILE_LINES_PER_CHAR_ROW:
	ld b,018h		    ;94f0

; Draw a line of the object's tile
draw_tile_line:
    ; Read a line of the tile pattern
	ld a,(de)			;94f2
; It can be a 0: NOP or a 0xB6: OR (HL)
AUTOMODIF_TRANSPARENCY:
	nop			    ;94f3

    ; Ex: DE = 0x9AB8 --> Patterns to draw
    ; Ex: HL = 0xC600 --> VRAM destination
	inc de			;94f4
	res 7,h		    ;94f5
	res 6,h		    ;94f7
    ; Ex: HL = 0x600
    
    ; Function: Writes data in VRAM
    ; Input   : HL - Address
    ;           A  - Value
	call WRTVRM		;94f9
	inc hl			;94fc
	set 6,h		    ;94fd
	set 7,h		    ;94ff
	djnz draw_tile_line	;9501

	ld (OBJ_RAM_PATTERNS),de		    ;9503
	dec c			        ;9507
	jr nz,write_all_tiles	;9508
	ret			            ;950a

; *****************************************
; * Animation of the "SOFT" text rotating *
; *****************************************
ROTATE_SOFT:
    ; Object setup
	ld a, 15		                        ;950b
	ld (AUTOMODIF_VRAM_OBJECT_DESTINATION + 1),a	;950d
	ld a, 120		                        ;9510
	ld (AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET + 1),a	;9512
    
    ; Write a NOP in the auto-modificable code
	xor a			        ;9515
	ld (AUTOMODIF_TRANSPARENCY),a	;9516

    ; Draw different rotations according to the object IDX
	ld hl,TABLE_PTR_OBJECT_ATTRIBS + 15*2    ;9519
l951ch:
    ; Read object IDX. Exit if 0xff marker.
	ld a,(hl)			    ;951c
	cp 0ffh		            ;951d
	ret z			        ;951f
    
	ld (AUTOMODIF_OBJECT_ATTRIBS_IDX + 1),a		;9520
	push hl			                    ;9523

    ; Pause for two retraces
	ei			                        ;9524
	ld b,002h		                    ;9525
l9527h:
	halt			;9527
	djnz l9527h		;9528
	di			    ;952a

    ; Draw object and loop until finished
	call MOVE_OBJECT	;952b
	pop hl			    ;952e
	inc hl			    ;952f
	jr l951ch		    ;9530

; *****************
; * Move letter T *
; *****************
MOVE_T:
    ; Configure object ID
	ld a, 7	    	                        ;9532
	ld (AUTOMODIF_OBJECT_ATTRIBS_IDX + 1),a		    ;9534
	ld a, 6 		                        ;9537
	ld (AUTOMODIF_VRAM_OBJECT_DESTINATION + 1),a	;9539

	ld a, 0 		                        ;953c
l953eh:
	cp NUM_ROWS	                            ;953e
	ret z			                        ;9540

    ; Configure offset
	ld (AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET + 1),a	;9541
    
    ; Draw object
	push af			                        ;9544
	call MOVE_OBJECT		                ;9545
	pop af			                        ;9548

    ; Move to the right
	add a, 8		                        ;9549
	jr l953eh		                        ;954b Loop until finished

; *****************
; * Move letter P *
; *****************
MOVE_P:
    ; Configure object ID
	ld a, 9		                            ;954d
	ld (AUTOMODIF_OBJECT_ATTRIBS_IDX + 1),a
    ld a, 7                                 ;9552
	ld (AUTOMODIF_VRAM_OBJECT_DESTINATION + 1),a

    ; Put in its position
	ld a, 144   	                        ;9557
l9559h:
	cp 80		                            ;9559 Move from 144 to 80 (8 steps)
	ret z			                        ;955b

	ld (AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET + 1),a	;955c
	push af			                        ;955f

    ; Wait one retrace
	ei			                            ;9560
	halt			                        ;9561
	di			                            ;9562

    ; Draw object
	call MOVE_OBJECT		                ;9563
	pop af			                        ;9566
    
    ; Move to the left
	sub 008h		                        ;9567
	jr l9559h		                        ;9569

; ****************************
; * Move letter O: fall down *
; ****************************
FALL_O:
    ; Write a OR (HL) in the auto-modificable code
	ld a,0b6h		        ;956b Opcode for OR (HL)
	ld (AUTOMODIF_TRANSPARENCY),a	;956d
    
    ; Configure object ID
	ld a, 8		                            ;9570
	ld (AUTOMODIF_OBJECT_ATTRIBS_IDX + 1),a		    ;9572
	ld a,56		                            ;9575
	ld (AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET + 1),a	;9577
    
	ld a,0		                            ;957a
l957ch:
    ; Repeat 7 times: move O down
	cp 7		                            ;957c
	jr z,l958bh		                        ;957e
	ld (AUTOMODIF_VRAM_OBJECT_DESTINATION + 1),a	;9580
	push af			;9583	f5 	. 
	call MOVE_OBJECT		;9584	cd b1 94 	. . . 
	pop af			;9587	f1 	. 
	inc a			;9588	3c 	< 
	jr l957ch		;9589	18 f1 	. . 
l958bh:
    ; Do the last copy and exit
	jp MOVE_OBJECT		;958b	c3 b1 94 	. . . 


; ***********************
; * Move letter O: jump *
; ***********************
JUMP_O:
	ld a, 10		                    ;958e
	ld (AUTOMODIF_OBJECT_ATTRIBS_IDX + 1),a		;9590
	ld hl, TABLE_PTR_OBJECT_ATTRIBS + 28*2               ;9593
l9596h:
    ; Read value and exit if 0xff
	ld a,(hl)			                ;9596
	cp 0ffh		                        ;9597
	jr z,l95abh		                    ;9599
	inc hl			                    ;959b

    ; Update position
	ld (AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET + 1),a		;959c	32 e9 94 	2 . . 

	ld a,(hl)			;959f	7e 	~ 
	inc hl			;95a0	23 	# 

	ld (AUTOMODIF_VRAM_OBJECT_DESTINATION + 1),a		;95a1	32 b2 94 	2 . . 

	push hl			;95a4	e5 	. 
	call MOVE_OBJECT		;95a5	cd b1 94 	. . . 
	pop hl			;95a8	e1 	. 

	jr l9596h		;95a9	18 eb 	. . 
l95abh:
	jp MOVE_OBJECT		;95ab


NICE_GLINT:
	ld hl, TABLE_PTR_OBJECT_ATTRIBS + 42*2 + 1           ;95ae
l95b1h:
	; Read object IDs until 0xff marker found
    ld a,(hl)			                ;95b1
	cp 0ffh		                        ;95b2
	ret z			                    ;95b4
    
	push hl			                    ;95b5
	
    ; Configure object attributes
    ld (AUTOMODIF_OBJECT_ATTRIBS_IDX + 1),a		    ;95b6
	ld a, 176		                        ;95b9
	ld (AUTOMODIF_VRAM_OBJ_DESTINATION_OFFSET + 1),a	;95bb
	ld a,13 		                        ;95be
	ld (AUTOMODIF_VRAM_OBJECT_DESTINATION + 1),a	;95c0
    
    ; Pause for 4 retraces
	ei			                ;95c3
	ld b,004h		            ;95c4
l95c6h:
	halt			            ;95c6
	djnz l95c6h		            ;95c7
	di			                ;95c9
	
    ; Draw object
    call MOVE_OBJECT		    ;95ca
    
    ; Loop until finished
	pop hl			            ;95cd
	inc hl			            ;95ce
	jr l95b1h		            ;95cf


; ********************
; * Main entry point *
; ********************
START:
	di			    ;95d1
    
    ; Write a NOP in the auto-modificable code
	xor a			            ;95d2
	ld (AUTOMODIF_TRANSPARENCY),a	    ;95d3

	call RESET_CGT	            ;95d6
	call MOVE_T	                ;95d9
	call MOVE_P	                ;95dc
	call COPY_VRAM_TO_BUFFER	;95df
	call FALL_O	                ;95e2
	call COPY_VRAM_TO_BUFFER	;95e5
	call JUMP_O	                ;95e8
	call ADD_COLORS_TO_TOPO  	;95eb
	call SET_TOPO_TEXT_COLOR	;95ee
	call ROTATE_SOFT	        ;95f1
	call ROTATE_SOFT	        ;95f4
	call ROTATE_SOFT	        ;95f7
	call REFLECTION_ANIMATION	;95fa
	call NICE_GLINT	            ;95fd
	ei			                ;9600
	ret			                ;9601

 
; ********************************************************************
; * Reset the Characters Colour Table (CT) to white over transparent *
; ********************************************************************
RESET_CGT:
	ld hl,COLOR_TABLE	;9602
	ld bc, NUM_COLS * NUM_ROWS * 8  ;9605 Number of bytes in the CT
l9608h:
	ld a,COLOR_WHITE_TRANSPARENT    ;9608
	call WRTVRM		                ;960a
	inc hl			                ;960d
	dec bc			                ;960e
	ld a,b			                ;960f
	or c			                ;9610 Finished?
	jr nz,l9608h		            ;9611 No, keep copying
	ret			                    ;9613

; ***************************************************
; * Set the red over black color to the "TOPO" text *
; ***************************************************
SET_TOPO_TEXT_COLOR:
	ld hl, COLOR_TABLE_POS_S	;9614
	ld a,COLOR_RED_BLACK		;9617

    ; Repeat the following twice
	ld c,2  		            ;9619
l961bh:
    ; Copy the color to 8 tiles in VRAM's HL
	ld b, 8*8		;961b 8 horizontal tiles, each of 8 bytes of color
l961dh:
	call WRTVRM		;961d Set color
	inc hl			;9620
	djnz l961dh		;9621 Loop until the line of chars is ready

    ; Now do the line below
	ld de,24*8   	;9623 Point HL to the next row of chars
	add hl,de		;9626
    
	dec c			;9627
	jr nz,l961bh	;9628 Repeat a second time
	ret			    ;962a

; *********************************************************
; * Add colors to the TOPO logo, blue and green column by *
; * column, in mirror symmetry                            *
; *********************************************************
ADD_COLORS_TO_TOPO:
	ld de,00008h		;962b	11 08 00 	. . . 
	ld hl,02658h		;962e	21 58 26 	! X & 
l9631h:
    ; Draw upper part of the column in blue
	push hl			;9631
	ld b, 5		    ;9632 Draw 5 chars
	push de			;9634
l9635h:
	ld a, COLOR_SKYBLUE_BLACK	;9635
	call sub_967eh		        ;9637
	ld de, 248   		        ;963a
	add hl,de			        ;963d Next row
	djnz l9635h		            ;963e

    ; Draw lower part of the column in green
	ld b, 6		                    ;9640 Draw 6 chars
l9642h:
	ld a, COLOR_LIGHTGREEN_BLACK	;9642
	call sub_967eh		            ;9644
	add hl,de			            ;9647 Next row
	djnz l9642h		                ;9648

	pop de			                ;964a
	pop hl			                ;964b
	push hl			                ;964c

    ; Point to next column
	add hl,de		                ;964d
	push de			                ;964e

    ; Now it'll draw two other columns, in mirror symmetry

    ; Draw upper part of the column in blue
	ld b, 5		                    ;964f Draw 5 chars
l9651h:
	ld a,COLOR_SKYBLUE_BLACK		;9651
	call sub_967eh		            ;9653
	ld de, 248  		            ;9656
	add hl,de			            ;9659  Next row
	djnz l9651h		                ;965a

    ; Draw lower part of the column in green
	ld b, 6 		                ;965c Draw 6 chars
l965eh:
	ld a,COLOR_LIGHTGREEN_BLACK		;965e
	call sub_967eh		            ;9660
	add hl,de			            ;9663 Next row
	djnz l965eh		                ;9664

	pop de			;9666
	pop hl			;9667
	
    ; Exit if finished
    ld a,e			;9668
	cp 152		    ;9669
	ret z			;966b
    
    ; Wait for 4 retraces
	ei			    ;966c
	ld b, 4         ;966d
l966fh:
	halt			;966f
	djnz l966fh		;9670
	di			    ;9672

    ; Move one column to the left
	add a,16		;9673	c6 10 	. . 
	ld e,a			;9675	5f 	_ 
	push de			;9676	d5 	. 
	ld de, -8		;9677	11 f8 ff 	. . . 
	add hl,de		;967a	19 	. 
	pop de			;967b	d1 	. 
	jr l9631h		;967c	18 b3 	. . 

sub_967eh:
	ld c,008h		;967e	0e 08 	. . 
l9680h:
	call WRTVRM		;9680	cd 4d 00 	. M . 
	inc hl			;9683	23 	# 
	dec c			;9684	0d 	. 
	jr nz,l9680h		;9685	20 f9 	  . 
	ret			;9687	c9 	. 

; ***************************************************************
; * Copy the contents on the VRAM's patterns generator table to *
; * the buffer                                                  *
; ***************************************************************
COPY_VRAM_TO_BUFFER:
	ld hl, 00000h		;9688 Pattern generator table
	ld de, VRAM_BUFFER	;968b Buffer
	ld bc, 24*32*8		;968e 32 columns, 20 rows, 8 bytes per char
    ; Block transfer to memory from VRAM
    ; BC: Block length
    ; DE: Start address of memory
    ; HL: Start address of VRAM
	jp LDIRMV   		;9691

TABLE_PTR_OBJECT_ATTRIBS:
    dw 0x0, 0x82, 0x104, 0x186, 0x208, 0x28a, 0x30c, 0x38e
    dw 0x6a8, 0x7ea, 0x9cc, 0xbfe, 0xc78, 0xcf2, 0xd6c, 0x0101
    dw 0x202, 0x303, 0x404, 0x505, 0x606, 0x505, 0x404, 0x303
    dw 0x202, 0x101, 0x0, 0xffff, 0x630, 0x530, 0x430, 0x438
    dw 0x338, 0x240, 0x248, 0x150, 0x258, 0x260, 0x368, 0x470
    dw 0x570, 0x670, 0xbff, 0xd0c, 0xb0c, 0xd0c, 0xff0e, 0x0
OBJ_RAM_PATTERNS:
	ld c,0a5h		;96f4
OBJ_VRAM_DESTINATION:
	ld (de),a		;96f6
	sub a			;96f7

TABLE_VRAM_DESTINATION:
    dw 0xc000, 0xc100, 0xc200, 0xc300, 0xc400, 0xc500, 0xc600, 0xc700
    dw 0xc800, 0xc900, 0xca00, 0xcb00, 0xcc00, 0xcd00, 0xce00, 0xcf00
    dw 0xd000, 0xd100, 0xd200, 0xd300, 0xd400, 0xd500, 0xd600, 0xd700    

; The attributes are:    
;   - AUTOMODIF_TILE_LINES_PER_CHAR_ROW
;   - AUTOMODIF_NUM_ROWS
;   - The patterns

; ./db_block.py --start 38696 --offset 38000 --end 42253 ../a.bin
TABLE_OBJECT_ATTRIBS:
    db 64
    db 2
    db 0x0, 0x0, 0x0, 0x1f, 0x3f, 0x78; 0x9728 - 0x972f
    db 0x70, 0x3f, 0x0, 0x0, 0x0, 0xe0, 0xf8, 0x3c; 0x9730 - 0x9737
    db 0x1, 0xfd, 0x0, 0x0, 0x0, 0x1f, 0x7f, 0xf8; 0x9738 - 0x973f
    db 0xc0, 0x80, 0x0, 0x0, 0x0, 0xf0, 0xfc, 0x3e; 0x9740 - 0x9747
    db 0x7, 0x3, 0x0, 0x0, 0x0, 0x3, 0x7, 0x1e; 0x9748 - 0x974f
    db 0x38, 0x3f, 0x0, 0x0, 0x0, 0xff, 0xff, 0x0; 0x9750 - 0x9757
    db 0x0, 0x80, 0x0, 0x0, 0x0, 0x9f, 0x9f, 0x90; 0x9758 - 0x975f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0xfe, 0xc2; 0x9760 - 0x9767
    db 0xc0, 0xc0, 0xf, 0x70, 0x38, 0x1f, 0x7, 0x0; 0x9768 - 0x976f
    db 0x0, 0x0, 0xfd, 0x1c, 0x38, 0xf0, 0xc0, 0x0; 0x9770 - 0x9777
    db 0x0, 0x0, 0xc0, 0xf0, 0x7c, 0x1f, 0x7, 0x0; 0x9778 - 0x977f
    db 0x0, 0x0, 0x7, 0x1e, 0x7c, 0xf0, 0xc0, 0x0; 0x9780 - 0x9787
    db 0x0, 0x0, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x0; 0x9788 - 0x978f
    db 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9790 - 0x9797
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9798 - 0x979f
    db 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x0; 0x97a0 - 0x97a7
    db 0x0, 0x0

    ; ***********************************
    db 64
    db 2
    db 0x0, 0x0, 0x0, 0x0; 0x97a8 - 0x97af
    db 0x0, 0x0, 0x1f, 0x78, 0x0, 0x0, 0x0, 0x0; 0x97b0 - 0x97b7
    db 0x0, 0x0, 0xe0, 0x3c, 0x0, 0x0, 0x0, 0x0; 0x97b8 - 0x97bf
    db 0x0, 0x0, 0x1f, 0xf8, 0x0, 0x0, 0x0, 0x0; 0x97c0 - 0x97c7
    db 0x0, 0x0, 0xf0, 0x1e, 0x0, 0x0, 0x0, 0x0; 0x97c8 - 0x97cf
    db 0x0, 0x0, 0x3, 0x1e, 0x0, 0x0, 0x0, 0x0; 0x97d0 - 0x97d7
    db 0x0, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0; 0x97d8 - 0x97df
    db 0x0, 0x0, 0x9f, 0x90, 0x0, 0x0, 0x0, 0x0; 0x97e0 - 0x97e7
    db 0x0, 0x0, 0xfe, 0xc2, 0x3f, 0x70, 0x1f, 0x0; 0x97e8 - 0x97ef
    db 0x0, 0x0, 0x0, 0x0, 0xfd, 0x1c, 0xf0, 0x0; 0x97f0 - 0x97f7
    db 0x0, 0x0, 0x0, 0x0, 0x80, 0xf0, 0x3f, 0x0; 0x97f8 - 0x97ff
    db 0x0, 0x0, 0x0, 0x0, 0x3, 0x1e, 0xf8, 0x0; 0x9800 - 0x9807
    db 0x0, 0x0, 0x0, 0x0, 0x3f, 0x30, 0x30, 0x0; 0x9808 - 0x980f
    db 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0; 0x9810 - 0x9817
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9818 - 0x981f
    db 0x0, 0x0, 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0x0; 0x9820 - 0x9827
    db 0x0, 0x0, 0x0, 0x0
    
    ; ***************************************
    db 64
    db 2
    db 0x0, 0x0; 0x9828 - 0x982f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0; 0x9830 - 0x9837
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xe0, 0x0, 0x0; 0x9838 - 0x983f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x7f, 0x0, 0x0; 0x9840 - 0x9847
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x0, 0x0; 0x9848 - 0x984f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0; 0x9850 - 0x9857
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x0, 0x0; 0x9858 - 0x985f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x9f, 0x0, 0x0; 0x9860 - 0x9867
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xfe, 0x3f, 0x1f; 0x9868 - 0x986f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd, 0xf0; 0x9870 - 0x9877
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x7f; 0x9878 - 0x987f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0xfc; 0x9880 - 0x9887
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f, 0x30; 0x9888 - 0x988f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0; 0x9890 - 0x9897
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9898 - 0x989f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xc0; 0x98a0 - 0x98a7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    
    ; *****************************************
    db 64
    db 2
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98b0 - 0x98b7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98b8 - 0x98bf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98c0 - 0x98c7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98c8 - 0x98cf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98d0 - 0x98d7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98d8 - 0x98df
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98e0 - 0x98e7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98e8 - 0x98ef
    db 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98f0 - 0x98f7
    db 0xfd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x98f8 - 0x98ff
    db 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9900 - 0x9907
    db 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9908 - 0x990f
    db 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9910 - 0x9917
    db 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9918 - 0x991f
    db 0x9f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9920 - 0x9927
    db 0xfe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9928 - 0x992f 
    
    ; *****************************************
    db 64
    db 2
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9930 - 0x9937
    db 0x0, 0x1f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9938 - 0x993f
    db 0x0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9940 - 0x9947
    db 0x0, 0x7f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9948 - 0x994f
    db 0x0, 0xfc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9950 - 0x9957
    db 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9958 - 0x995f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9960 - 0x9967
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9968 - 0x996f
    db 0x0, 0xc0, 0x3f, 0x1f, 0x0, 0x0, 0x0, 0x0; 0x9970 - 0x9977
    db 0x0, 0x0, 0xfd, 0xe0, 0x0, 0x0, 0x0, 0x0; 0x9978 - 0x997f
    db 0x0, 0x0, 0xc0, 0x7f, 0x0, 0x0, 0x0, 0x0; 0x9980 - 0x9987
    db 0x0, 0x0, 0x7, 0xfc, 0x0, 0x0, 0x0, 0x0; 0x9988 - 0x998f
    db 0x0, 0x0, 0x3f, 0x3, 0x0, 0x0, 0x0, 0x0; 0x9990 - 0x9997
    db 0x0, 0x0, 0x80, 0xff, 0x0, 0x0, 0x0, 0x0; 0x9998 - 0x999f
    db 0x0, 0x0, 0x0, 0x9f, 0x0, 0x0, 0x0, 0x0; 0x99a0 - 0x99a7
    db 0x0, 0x0, 0xc0, 0xfe, 0x0, 0x0, 0x0, 0x0; 0x99a8 - 0x99af
    db 0x0, 0x0

    ; *****************************************
    db 64
    db 2
    db 0x0, 0x0, 0x0, 0x0; 0x99b0 - 0x99b7
    db 0x0, 0x0, 0x1f, 0x70, 0x0, 0x0, 0x0, 0x0; 0x99b8 - 0x99bf
    db 0x0, 0x0, 0xf0, 0x1c, 0x0, 0x0, 0x0, 0x0; 0x99c0 - 0x99c7
    db 0x0, 0x0, 0x3f, 0xf0, 0x0, 0x0, 0x0, 0x0; 0x99c8 - 0x99cf
    db 0x0, 0x0, 0xf8, 0x1e, 0x0, 0x0, 0x0, 0x0; 0x99d0 - 0x99d7
    db 0x0, 0x0, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0; 0x99d8 - 0x99df
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x99e0 - 0x99e7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x99e8 - 0x99ef
    db 0x0, 0x0, 0xc0, 0xc0, 0x3f, 0x78, 0x1f, 0x0; 0x99f0 - 0x99f7
    db 0x0, 0x0, 0x0, 0x0, 0xfd, 0x3c, 0xe0, 0x0; 0x99f8 - 0x99ff
    db 0x0, 0x0, 0x0, 0x0, 0x80, 0xf8, 0x1f, 0x0; 0x9a00 - 0x9a07
    db 0x0, 0x0, 0x0, 0x0, 0x3, 0x1e, 0xf0, 0x0; 0x9a08 - 0x9a0f
    db 0x0, 0x0, 0x0, 0x0, 0x3f, 0x1e, 0x3, 0x0; 0x9a10 - 0x9a17
    db 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0xff, 0x0; 0x9a18 - 0x9a1f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x90, 0x9f, 0x0; 0x9a20 - 0x9a27
    db 0x0, 0x0, 0x0, 0x0, 0xc0, 0xc2, 0xfe, 0x0; 0x9a28 - 0x9a2f
    db 0x0, 0x0, 0x0, 0x0
    
    ; *****************************************
    db 64
    db 2
    db 0x0, 0x0; 0x9a30 - 0x9a37
    db 0x0, 0x7, 0x1f, 0x38, 0x70, 0xf, 0x0, 0x0; 0x9a38 - 0x9a3f
    db 0x0, 0xc0, 0xf0, 0x38, 0x1c, 0xfd, 0x0, 0x0; 0x9a40 - 0x9a47
    db 0x0, 0x7, 0x1f, 0x7c, 0xf0, 0xc0, 0x0, 0x0; 0x9a48 - 0x9a4f
    db 0x0, 0xc0, 0xf0, 0x7c, 0x1e, 0x7, 0x0, 0x0; 0x9a50 - 0x9a57
    db 0x0, 0x30, 0x30, 0x30, 0x30, 0x3f, 0x0, 0x0; 0x9a58 - 0x9a5f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0; 0x9a60 - 0x9a67
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9a68 - 0x9a6f
    db 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x3f, 0x70; 0x9a70 - 0x9a77
    db 0x78, 0x3f, 0x1f, 0x0, 0x0, 0x0, 0xfd, 0x1; 0x9a78 - 0x9a7f
    db 0x3c, 0xf8, 0xe0, 0x0, 0x0, 0x0, 0x80, 0xc0; 0x9a80 - 0x9a87
    db 0xf8, 0x7f, 0x1f, 0x0, 0x0, 0x0, 0x3, 0x7; 0x9a88 - 0x9a8f
    db 0x3e, 0xfc, 0xf0, 0x0, 0x0, 0x0, 0x3f, 0x38; 0x9a90 - 0x9a97
    db 0x1e, 0x7, 0x3, 0x0, 0x0, 0x0, 0x80, 0x0; 0x9a98 - 0x9a9f
    db 0x0, 0xff, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9aa0 - 0x9aa7
    db 0x90, 0x9f, 0x9f, 0x0, 0x0, 0x0, 0xc0, 0xc0; 0x9aa8 - 0x9aaf
    db 0xc2, 0xfe, 0xfe, 0x0, 0x0, 0x0 ; 0x9ab0 - 0x9ab5

    ; *****************************************
    db 72
    db 11
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ab8 - 0x9abf
    db 0x0, 0x0, 0x3, 0x2, 0x2, 0x2, 0x2, 0x2; 0x9ac0 - 0x9ac7
    db 0x0, 0x0, 0xff, 0x0, 0x7f, 0x3f, 0x1f, 0x0; 0x9ac8 - 0x9acf
    db 0x0, 0x0, 0xff, 0x0, 0x70, 0xdd, 0x72, 0x0; 0x9ad0 - 0x9ad7
    db 0x0, 0x0, 0xff, 0x0, 0x0, 0x50, 0xa8, 0x1; 0x9ad8 - 0x9adf
    db 0x0, 0x0, 0xf0, 0x10, 0x10, 0x50, 0xd0, 0xd0; 0x9ae0 - 0x9ae7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ae8 - 0x9aef
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9af0 - 0x9af7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9af8 - 0x9aff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b00 - 0x9b07
    db 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2; 0x9b08 - 0x9b0f
    db 0xf, 0x8, 0x84, 0x8a, 0x41, 0x8a, 0x45, 0x88; 0x9b10 - 0x9b17
    db 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80; 0x9b18 - 0x9b1f
    db 0xfd, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5; 0x9b20 - 0x9b27
    db 0xd0, 0xd0, 0xd0, 0x90, 0xd0, 0xd0, 0x50, 0xd0; 0x9b28 - 0x9b2f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b30 - 0x9b37
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b38 - 0x9b3f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b40 - 0x9b47
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b48 - 0x9b4f
    db 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3e, 0x20; 0x9b50 - 0x9b57
    db 0x45, 0x4a, 0xcd, 0xa8, 0xed, 0x6a, 0xcd, 0xea; 0x9b58 - 0x9b5f
    db 0x0, 0x0, 0x40, 0x80, 0x40, 0x20, 0x40, 0xa0; 0x9b60 - 0x9b67
    db 0x4, 0x5, 0x5, 0x5, 0x4, 0x5, 0x5, 0x5; 0x9b68 - 0x9b6f
    db 0x90, 0xd0, 0x50, 0xd0, 0x90, 0xd0, 0x50, 0xc0; 0x9b70 - 0x9b77
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b78 - 0x9b7f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b80 - 0x9b87
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b88 - 0x9b8f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9b90 - 0x9b97
    db 0x27, 0x23, 0x21, 0x20, 0x20, 0x20, 0x20, 0x28; 0x9b98 - 0x9b9f
    db 0x6d, 0xaa, 0xcd, 0xe, 0xff, 0xfe, 0xff, 0xff; 0x9ba0 - 0x9ba7
    db 0x10, 0xa8, 0x44, 0xa8, 0x50, 0xaa, 0x45, 0xaa; 0x9ba8 - 0x9baf
    db 0x4, 0x5, 0x4, 0x4, 0x7, 0x0, 0x0, 0x0; 0x9bb0 - 0x9bb7
    db 0xb8, 0x7c, 0xf8, 0x0, 0xf0, 0x20, 0x20, 0x40; 0x9bb8 - 0x9bbf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9bc0 - 0x9bc7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9bc8 - 0x9bcf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9bd0 - 0x9bd7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9bd8 - 0x9bdf
    db 0x20, 0x28, 0x24, 0x28, 0x24, 0x28, 0x24, 0x28; 0x9be0 - 0x9be7
    db 0xff, 0xff, 0xff, 0xbf, 0xbf, 0xbf, 0x9f, 0x87; 0x9be8 - 0x9bef
    db 0xd1, 0xea, 0xd5, 0xea, 0xf4, 0xfe, 0xff, 0xff; 0x9bf0 - 0x9bf7
    db 0x40, 0x20, 0x50, 0xa8, 0x4, 0xab, 0xd0, 0xf8; 0x9bf8 - 0x9bff
    db 0x40, 0x80, 0x80, 0x80, 0x80, 0x0, 0x0, 0x0; 0x9c00 - 0x9c07
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c08 - 0x9c0f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c10 - 0x9c17
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c18 - 0x9c1f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c20 - 0x9c27
    db 0x24, 0x28, 0x24, 0x28, 0x26, 0x24, 0x2e, 0x2a; 0x9c28 - 0x9c2f
    db 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xfc, 0x4; 0x9c30 - 0x9c37
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c38 - 0x9c3f
    db 0x0, 0x1, 0x1, 0x1, 0x1, 0x0, 0x3, 0xf; 0x9c40 - 0x9c47
    db 0x0, 0x0, 0x0, 0x0, 0x80, 0x80, 0x80, 0x80; 0x9c48 - 0x9c4f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c50 - 0x9c57
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c58 - 0x9c5f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c60 - 0x9c67
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c68 - 0x9c6f
    db 0x2d, 0x2b, 0x26, 0x20, 0x3f, 0x0, 0x0, 0x0; 0x9c70 - 0x9c77
    db 0x64, 0xc4, 0x86, 0x2, 0x82, 0x83, 0x81, 0xc1; 0x9c78 - 0x9c7f
    db 0x0, 0x0, 0x3, 0x7, 0x1f, 0x3f, 0xff, 0xff; 0x9c80 - 0x9c87
    db 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff; 0x9c88 - 0x9c8f
    db 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0xf8, 0xfc; 0x9c90 - 0x9c97
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9c98 - 0x9c9f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ca0 - 0x9ca7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ca8 - 0x9caf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9cb0 - 0x9cb7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9cb8 - 0x9cbf
    db 0x41, 0x40, 0x60, 0x20, 0x30, 0x12, 0x19, 0xa; 0x9cc0 - 0x9cc7
    db 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x9f; 0x9cc8 - 0x9ccf
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff; 0x9cd0 - 0x9cd7
    db 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff; 0x9cd8 - 0x9cdf
    db 0x0, 0x0, 0xc0, 0xf0, 0xfc, 0xff, 0xff, 0xff; 0x9ce0 - 0x9ce7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xff, 0xff; 0x9ce8 - 0x9cef
    db 0x0, 0x0, 0x0, 0x1, 0x7, 0x7f, 0xff, 0xff; 0x9cf0 - 0x9cf7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9cf8 - 0x9cff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d00 - 0x9d07
    db 0xd, 0x6, 0x2, 0x3, 0x1, 0x0, 0x0, 0x0; 0x9d08 - 0x9d0f
    db 0x4f, 0x8f, 0x57, 0x2b, 0x95, 0xce, 0x5b, 0x6e; 0x9d10 - 0x9d17
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbf; 0x9d18 - 0x9d1f
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff; 0x9d20 - 0x9d27
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff; 0x9d28 - 0x9d2f
    db 0xff, 0xff, 0xfe, 0xfd, 0xfa, 0xfd, 0xfa, 0xf5; 0x9d30 - 0x9d37
    db 0xfa, 0xd5, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55; 0x9d38 - 0x9d3f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d40 - 0x9d47
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d48 - 0x9d4f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d50 - 0x9d57
    db 0x37, 0x1a, 0xd, 0x6, 0x3, 0x0, 0x0, 0x0; 0x9d58 - 0x9d5f
    db 0xdf, 0xef, 0xf3, 0x7d, 0xbe, 0xdf, 0x67, 0x3b; 0x9d60 - 0x9d67
    db 0xff, 0xff, 0xff, 0xff, 0x7f, 0x9f, 0xe7, 0xe8; 0x9d68 - 0x9d6f
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff; 0x9d70 - 0x9d77
    db 0xfa, 0xf5, 0xea, 0xf5, 0xea, 0xf5, 0xea, 0xd5; 0x9d78 - 0x9d7f
    db 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55; 0x9d80 - 0x9d87
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d88 - 0x9d8f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d90 - 0x9d97
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9d98 - 0x9d9f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9da0 - 0x9da7
    db 0xc, 0x7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9da8 - 0x9daf
    db 0xfe, 0x2b, 0xce, 0x71, 0x1e, 0x3, 0x0, 0x0; 0x9db0 - 0x9db7
    db 0x1f, 0x40, 0xaa, 0x15, 0x0, 0xc0, 0x7e, 0x3; 0x9db8 - 0x9dbf
    db 0xea, 0xd5, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff; 0x9dc0 - 0x9dc7
    db 0xaa, 0x40, 0x0, 0x0, 0x0, 0x0, 0xf, 0xf8; 0x9dc8 - 0x9dcf
    
    ; *****************************************
    db 40
    db 7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9dd0 - 0x9dd7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9dd8 - 0x9ddf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9de0 - 0x9de7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9de8 - 0x9def
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9df0 - 0x9df7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9df8 - 0x9dff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9e00 - 0x9e07
    db 0x0, 0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9e08 - 0x9e0f
    db 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9e10 - 0x9e17
    db 0xe0, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9e18 - 0x9e1f
    db 0x0, 0x0, 0x0, 0x0, 0x3, 0x6, 0xc, 0x8; 0x9e20 - 0x9e27
    db 0x0, 0x0, 0x38, 0xe0, 0x80, 0x0, 0x0, 0x1; 0x9e28 - 0x9e2f
    db 0xa, 0x35, 0xa, 0x15, 0xa, 0x0, 0x2a, 0x55; 0x9e30 - 0x9e37
    db 0xaa, 0x55, 0x83, 0x7c, 0xbb, 0x7f, 0x86, 0x41; 0x9e38 - 0x9e3f
    db 0x80, 0x0, 0x80, 0xe0, 0x38, 0x8c, 0xf4, 0xf8; 0x9e40 - 0x9e47
    db 0x78, 0x38, 0x0, 0x1, 0x3, 0x3, 0x7, 0xf; 0x9e48 - 0x9e4f
    db 0xf, 0x1f, 0x6a, 0xf5, 0xfa, 0xf5, 0xfa, 0xf5; 0x9e50 - 0x9e57
    db 0xfa, 0xfd, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55; 0x9e58 - 0x9e5f
    db 0xaa, 0x55, 0xa0, 0x40, 0xa8, 0x50, 0xa0, 0x54; 0x9e60 - 0x9e67
    db 0xa8, 0x55, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9e68 - 0x9e6f
    db 0x0, 0x8, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f; 0x9e70 - 0x9e77
    db 0x3f, 0xf, 0xfe, 0xfd, 0xfe, 0xff, 0xfe, 0xff; 0x9e78 - 0x9e7f
    db 0xff, 0xff, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0xd5; 0x9e80 - 0x9e87
    db 0xfa, 0xff, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55; 0x9e88 - 0x9e8f
    db 0xaa, 0xd0, 0x14, 0x38, 0xb4, 0x3a, 0x9d, 0x2a; 0x9e90 - 0x9e97
    db 0x1f, 0xe, 0x0, 0x10, 0x28, 0x10, 0x8, 0x4; 0x9e98 - 0x9e9f
    db 0xa, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ea0 - 0x9ea7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ea8 - 0x9eaf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9eb0 - 0x9eb7
    db 0x0, 0x0, 0x0, 0x40, 0x0, 0x40, 0x68, 0x54; 0x9eb8 - 0x9ebf
    db 0x7a, 0x5d, 0xa, 0x4, 0x2, 0x1, 0x2, 0x1; 0x9ec0 - 0x9ec7
    db 0x0, 0x0, 0x80, 0x40, 0x20, 0x50, 0xaa, 0x55; 0x9ec8 - 0x9ecf
    db 0xa8, 0x55, 0x0, 0x0, 0x0, 0x0, 0x80, 0x50; 0x9ed0 - 0x9ed7
    db 0xaa, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ed8 - 0x9edf
    db 0x0, 0x55, 0x77, 0x7f, 0x5e, 0x76, 0x7c, 0x78; 0x9ee0 - 0x9ee7
    db 0x78, 0x70
    
    ; *****************************************
    ; Unused
	db 0        ;9eea
	db 0
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9ee8 - 0x9eef
    db 0xa, 0x5, 0x0, 0x0, 0x0, 0x0; 0x9ef0 - 0x9ef7
    db 0x0, 0x0, 0xaa, 0x55, 0xa2, 0x15, 0x0, 0x0; 0x9ef8 - 0x9eff
    db 0x0, 0x0, 0x2a, 0x54, 0xa8, 0x0, 0x0, 0x0; 0x9f00 - 0x9f07
    db 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9f08 - 0x9f0f
    db 0x0, 0x0, 0x30, 0xa, 0x0, 0x0, 0x0, 0x0; 0x9f10 - 0x9f17
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9f18 - 0x9f1f
    db 0x0, 0x0, 0x0, 0xf, 0x0, 0x0, 0x0, 0x0; 0x9f20 - 0x9f27
    db 0x0, 0x0, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0; 0x9f28 - 0x9f2f
    db 0x0, 0x0, 0xe0, 0x3e, 0x0, 0x0, 0x0, 0x0; 0x9f30 - 0x9f37
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0x9f38 - 0x9f3f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x6; 0x9f40 - 0x9f47
    db 0x4, 0x0, 0x0, 0x0, 0x38, 0xe0, 0x80, 0x0; 0x9f48 - 0x9f4f
    db 0x0, 0x2, 0xf, 0x3f, 0x2, 0x15, 0xa, 0x0; 0x9f50 - 0x9f57
    db 0x15, 0xaa, 0x55, 0xaa, 0x83, 0x7c, 0xad, 0x3f; 0x9f58 - 0x9f5f
    db 0x46, 0x1, 0x0, 0x0, 0x80, 0xe0, 0x38, 0xcc; 0x9f60 - 0x9f67
    db 0xf4, 0xf8, 0x78, 0x38, 0x0, 0x0, 0x0, 0x0; 0x9f68 - 0x9f6f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x3, 0x3; 0x9f70 - 0x9f77
    db 0x1, 0x0, 0x0, 0x8, 0x7f, 0xff, 0xff, 0xff; 0x9f78 - 0x9f7f
    db 0xff, 0xff, 0xff, 0x7f, 0xd5, 0xea, 0xd5, 0xea; 0x9f80 - 0x9f87
    db 0xd5, 0xaa, 0xd5, 0xaa, 0x0, 0x0, 0x0, 0x0; 0x9f88 - 0x9f8f
    db 0x40, 0x80, 0x40, 0x80, 0x8, 0x0, 0x0, 0x0; 0x9f90 - 0x9f97
    db 0x0, 0x8, 0x4, 0xa, 0x0, 0x0, 0x0, 0x0; 0x9f98 - 0x9f9f
    db 0x0, 0x0, 0x0, 0x0, 0x14, 0x38, 0x34, 0x3a; 0x9fa0 - 0x9fa7
    db 0x1d, 0x2a, 0x1f, 0xe, 0x7f, 0x3f, 0x3f, 0x3f; 0x9fa8 - 0x9faf
    db 0x3f, 0x1f, 0xf, 0x3, 0xd5, 0xea, 0xd5, 0xea; 0x9fb0 - 0x9fb7
    db 0xf5, 0xfa, 0xfd, 0xfe, 0x50, 0xa0, 0x50, 0xa8; 0x9fb8 - 0x9fbf
    db 0x51, 0xa8, 0x54, 0xa8, 0x14, 0x2a, 0x15, 0x3e; 0x9fc0 - 0x9fc7
    db 0x3f, 0x7f, 0x3f, 0xe, 0x0, 0x0, 0x0, 0x0; 0x9fc8 - 0x9fcf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x0, 0x40; 0x9fd0 - 0x9fd7
    db 0x68, 0x54, 0x7a, 0x5d, 0x0, 0x50, 0x50, 0x50; 0x9fd8 - 0x9fdf
    db 0xa0, 0xa0, 0xa0, 0xaa, 0x0, 0x0, 0x0, 0x0; 0x9fe0 - 0x9fe7
    db 0x0, 0x0, 0x0, 0xa0, 0x0, 0x1, 0x1, 0x1; 0x9fe8 - 0x9fef
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4; 0x9ff0 - 0x9ff7
    db 0x82, 0x95, 0xaa, 0x95, 0x0, 0x0, 0x0, 0x0; 0x9ff8 - 0x9fff
    db 0x0, 0x0, 0x0, 0x0, 0x77, 0x7f, 0x5e, 0x76; 0xa000 - 0xa007
    db 0x7d, 0x7a, 0x79, 0x72, 0x15, 0x6a, 0x95, 0x2a; 0xa008 - 0xa00f
    db 0x15, 0xaa, 0x55, 0xaa, 0x51, 0xaa, 0x55, 0xaa; 0xa010 - 0xa017
    db 0x55, 0xaa, 0x55, 0xaa, 0x40, 0xaa, 0x55, 0xaa; 0xa018 - 0xa01f
    db 0x55, 0xaa, 0x55, 0xaa, 0x4a, 0xd5, 0x6a, 0xa4; 0xa020 - 0xa027
    db 0x74, 0xb8, 0x78, 0xf0, 0x0, 0x0, 0x0, 0x0; 0xa028 - 0xa02f
    db 0x0, 0x0, 0x0, 0x0, 0x45, 0x2a, 0x55, 0x6a; 0xa030 - 0xa037
    db 0x75, 0x6a, 0x75, 0x7a, 0x55, 0xaa, 0x55, 0xaa; 0xa038 - 0xa03f
    db 0x57, 0xaf, 0x5f, 0xbf, 0x55, 0xaa, 0x5f, 0xbf; 0xa040 - 0xa047
    db 0xff, 0xf8, 0xf8, 0xfa, 0x55, 0xff, 0xfe, 0xf9; 0xa048 - 0xa04f
    db 0xc2, 0x5, 0x2, 0x0, 0xc0, 0xb8, 0x68, 0xb8; 0xa050 - 0xa057
    db 0xe0, 0x48, 0x38, 0xe0, 0x0, 0x0, 0x0, 0x0; 0xa058 - 0xa05f
    db 0x0, 0x0, 0x0, 0x0, 0x3f, 0x57, 0x2b, 0x55; 0xa060 - 0xa067
    db 0x2b, 0x55, 0x2a, 0x55, 0xff, 0xff, 0xff, 0xff; 0xa068 - 0xa06f
    db 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfb, 0xfb, 0xfb; 0xa070 - 0xa077
    db 0xf1, 0xe0, 0xc0, 0x80, 0x3, 0x9e, 0xb0, 0xa0; 0xa078 - 0xa07f
    db 0xa0, 0x20, 0x60, 0xc0, 0x80, 0x0, 0x0, 0x0; 0xa080 - 0xa087
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa088 - 0xa08f
    db 0x0, 0x0, 0x0, 0x0, 0x2a, 0x55, 0x2a, 0x55; 0xa090 - 0xa097
    db 0x2a, 0x55, 0x28, 0x43, 0xff, 0x7e, 0xf8, 0x75; 0xa098 - 0xa09f
    db 0x8a, 0x35, 0xe8, 0xb3, 0x1, 0x43, 0xa6, 0x4c; 0xa0a0 - 0xa0a7
    db 0xb8, 0x60, 0xc0, 0x80, 0x80, 0x0, 0x0, 0x0; 0xa0a8 - 0xa0af
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0b0 - 0xa0b7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0b8 - 0xa0bf
    db 0x0, 0x0, 0x0, 0x0, 0x1f, 0x7f, 0x7e, 0x71; 0xa0c0 - 0xa0c7
    db 0xf, 0x78, 0xc0, 0x0, 0xe6, 0x9c, 0x70, 0xc0; 0xa0c8 - 0xa0cf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0d0 - 0xa0d7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0d8 - 0xa0df
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0e0 - 0xa0e7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0e8 - 0xa0ef
    db 0x0, 0x0, 0x0, 0x0, 0x38, 0xa, 0x0, 0x0; 0xa0f0 - 0xa0f7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa0f8 - 0xa0ff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa100 - 0xa107
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa108 - 0xa10f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa110 - 0xa117
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa118 - 0xa11f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa120 - 0xa127
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa128 - 0xa12f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa130 - 0xa137
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa138 - 0xa13f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x0, 0x0; 0xa140 - 0xa147
    db 0x0, 0x0, 0x0, 0x0, 0xff, 0x80, 0x0, 0x0; 0xa148 - 0xa14f
    db 0x0, 0x0, 0x0, 0x0, 0xf0, 0x3e, 0x0, 0x0; 0xa150 - 0xa157
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa158 - 0xa15f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa160 - 0xa167
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa168 - 0xa16f
    db 0x3, 0x6, 0x4, 0x0, 0x0, 0x0, 0x38, 0xe0; 0xa170 - 0xa177
    db 0x80, 0x0, 0x0, 0x3, 0xf, 0x3f, 0x1, 0x2a; 0xa178 - 0xa17f
    db 0x45, 0x0, 0x28, 0xd4, 0xaa, 0xd5, 0x43, 0xac; 0xa180 - 0xa187
    db 0x5b, 0x3f, 0x6, 0x1, 0x0, 0x0, 0x80, 0xe0; 0xa188 - 0xa18f
    db 0x38, 0xcc, 0xb6, 0xfb, 0x7d, 0x3e, 0x0, 0x0; 0xa190 - 0xa197
    db 0x0, 0x0, 0x0, 0x0, 0x80, 0xc0, 0x0, 0x0; 0xa198 - 0xa19f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1; 0xa1a0 - 0xa1a7
    db 0x3, 0x3, 0x1, 0x8, 0x4, 0xa, 0x7f, 0xff; 0xa1a8 - 0xa1af
    db 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xaa, 0xd5; 0xa1b0 - 0xa1b7
    db 0xaa, 0xd5, 0xea, 0xd5, 0xea, 0xf5, 0x0, 0x0; 0xa1b8 - 0xa1bf
    db 0x0, 0x0, 0x80, 0x0, 0x80, 0x40, 0xf, 0x7; 0xa1c0 - 0xa1c7
    db 0x3, 0x3, 0x1, 0x0, 0x0, 0x0, 0x60, 0xb0; 0xa1c8 - 0xa1cf
    db 0xd0, 0x58, 0xc8, 0x6c, 0xf4, 0x56, 0x0, 0x0; 0xa1d0 - 0xa1d7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0x2a; 0xa1d8 - 0xa1df
    db 0x15, 0x3e, 0x3f, 0x7f, 0x3f, 0xe, 0x7f, 0x3f; 0xa1e0 - 0xa1e7
    db 0x3f, 0x3f, 0x3f, 0xdf, 0x8f, 0x3, 0xea, 0xf5; 0xa1e8 - 0xa1ef
    db 0xfa, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x50; 0xa1f0 - 0xa1f7
    db 0xa8, 0x55, 0xaa, 0xd5, 0xfa, 0xff, 0x0, 0x1; 0xa1f8 - 0xa1ff
    db 0x3, 0x11, 0xac, 0x54, 0xb8, 0xe0, 0x7a, 0xb2; 0xa200 - 0xa207
    db 0xaa, 0x93, 0xa9, 0x95, 0x49, 0x41, 0x0, 0x0; 0xa208 - 0xa20f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa210 - 0xa217
    db 0x0, 0x4, 0x2, 0x15, 0x2a, 0x15, 0x0, 0x10; 0xa218 - 0xa21f
    db 0x10, 0x10, 0xa0, 0xa0, 0xa4, 0x6a, 0x0, 0x0; 0xa220 - 0xa227
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0; 0xa228 - 0xa22f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa230 - 0xa237
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x41, 0x41; 0xa238 - 0xa23f
    db 0x41, 0x41, 0xa1, 0x93, 0xaa, 0x92, 0x0, 0x0; 0xa240 - 0xa247
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xa, 0x15; 0xa248 - 0xa24f
    db 0xa, 0x4, 0x5, 0x3, 0x3, 0x1, 0x55, 0x6a; 0xa250 - 0xa257
    db 0xf5, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x50, 0xa8; 0xa258 - 0xa25f
    db 0x55, 0xaa, 0x55, 0xea, 0xf5, 0xfa, 0x0, 0x0; 0xa260 - 0xa267
    db 0x0, 0x80, 0x40, 0x80, 0x40, 0xa0, 0x1, 0x1; 0xa268 - 0xa26f
    db 0x2, 0x2, 0x5, 0xb, 0x9, 0x37, 0x2a, 0x56; 0xa270 - 0xa277
    db 0xa4, 0xcc, 0x68, 0xd8, 0xd0, 0x30, 0x0, 0x0; 0xa278 - 0xa27f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa280 - 0xa287
    db 0x0, 0x0, 0x4, 0x6, 0x3, 0x0, 0x7f, 0x3f; 0xa288 - 0xa28f
    db 0xf, 0x3, 0x0, 0x5, 0x82, 0xe5, 0xfd, 0xfa; 0xa290 - 0xa297
    db 0xfd, 0xff, 0x3f, 0x40, 0xad, 0x57, 0x50, 0xa9; 0xa298 - 0xa29f
    db 0x5e, 0xf9, 0x87, 0x5f, 0xf7, 0x7c, 0x4b, 0xbe; 0xa2a0 - 0xa2a7
    db 0x7d, 0xfb, 0xf6, 0xcc, 0x38, 0xe0, 0x60, 0xc0; 0xa2a8 - 0xa2af
    db 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa2b0 - 0xa2b7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa2b8 - 0xa2bf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0xf; 0xa2c0 - 0xa2c7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2d, 0x80; 0xa2c8 - 0xa2cf
    db 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc3, 0x3e; 0xa2d0 - 0xa2d7
    db 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0; 0xa2d8 - 0xa2df
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa2e0 - 0xa2e7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa2e8 - 0xa2ef
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa2f0 - 0xa2f7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa2f8 - 0xa2ff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa300 - 0xa307
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa308 - 0xa30f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa310 - 0xa317
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa318 - 0xa31f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x5; 0xa320 - 0xa327
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa328 - 0xa32f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa330 - 0xa337
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa338 - 0xa33f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1; 0xa340 - 0xa347
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa348 - 0xa34f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa350 - 0xa357
    db 0x1, 0x1, 0x0, 0xfe, 0xfe, 0xc2, 0xc0, 0xc1; 0xa358 - 0xa35f
    db 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0x0; 0xa360 - 0xa367
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa368 - 0xa36f
    db 0xc1, 0xc0, 0xc0, 0xc0, 0xc0, 0x0, 0x0, 0x0; 0xa370 - 0xa377
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa378 - 0xa37f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa380 - 0xa387
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa388 - 0xa38f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa390 - 0xa397
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa398 - 0xa39f
    db 0x18, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3a0 - 0xa3a7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3a8 - 0xa3af
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3b0 - 0xa3b7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1; 0xa3b8 - 0xa3bf
    db 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3c0 - 0xa3c7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3c8 - 0xa3cf
    db 0x0, 0x0, 0x1, 0x1, 0x0, 0xfe, 0xfe, 0xc2; 0xa3d0 - 0xa3d7
    db 0xc0, 0xc1, 0x0, 0x0, 0x40, 0x0, 0xfe, 0x0; 0xa3d8 - 0xa3df
    db 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3e0 - 0xa3e7
    db 0x0, 0x0, 0xc1, 0xc1, 0xc1, 0xc1, 0xc0, 0x0; 0xa3e8 - 0xa3ef
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3f0 - 0xa3f7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa3f8 - 0xa3ff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa400 - 0xa407
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa408 - 0xa40f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa410 - 0xa417
    db 0x0, 0x0, 0x18, 0x5, 0x0, 0x0, 0x0, 0x0; 0xa418 - 0xa41f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa420 - 0xa427
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa428 - 0xa42f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1; 0xa430 - 0xa437
    db 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0; 0xa438 - 0xa43f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa440 - 0xa447
    db 0x0, 0x0, 0x0, 0x0, 0x1, 0x11, 0x0, 0xfe; 0xa448 - 0xa44f
    db 0xfe, 0xc2, 0xc0, 0xc9, 0x0, 0x20, 0x40, 0x0; 0xa450 - 0xa457
    db 0xff, 0x0, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0; 0xa458 - 0xa45f
    db 0x80, 0x0, 0x0, 0x0, 0xc1, 0xc1, 0xc1, 0xc1; 0xa460 - 0xa467
    db 0xc1, 0x1, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0; 0xa468 - 0xa46f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa470 - 0xa477
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa478 - 0xa47f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa480 - 0xa487
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa488 - 0xa48f
    db 0x0, 0x0, 0x0, 0x0, 0x18, 0x5, 0x0, 0x0; 0xa490 - 0xa497
    db 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0; 0xa498 - 0xa49f
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa4a0 - 0xa4a7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1; 0xa4a8 - 0xa4af
    db 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0; 0xa4b0 - 0xa4b7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa4b8 - 0xa4bf
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x21, 0x11; 0xa4c0 - 0xa4c7
    db 0x0, 0xfe, 0xfe, 0xc2, 0xc0, 0xc9, 0x10, 0x20; 0xa4c8 - 0xa4cf
    db 0x40, 0x0, 0xff, 0x0, 0x0, 0x40, 0x0, 0x0; 0xa4d0 - 0xa4d7
    db 0x0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0xd1, 0xc1; 0xa4d8 - 0xa4df
    db 0xc1, 0xc1, 0xc1, 0x1, 0x1, 0x1, 0x20, 0x10; 0xa4e0 - 0xa4e7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa4e8 - 0xa4ef
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0; 0xa4f0 - 0xa4f7
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa4f8 - 0xa4ff
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0; 0xa500
    db 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
    
